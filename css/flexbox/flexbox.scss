// FLEXBOX  


// 1. Display: flex 
// For an element to become a flex container, its display property must be set to flex.
// A div with the declaration display: flex; will remain block level — no other elements will appear on the same line as i

.container {
    display: flex;
}


// 2. Display: inline-flex
// If we didn’t want div elements to be block-level elements, we would use display: inline-flex

.container2 {
    width: 200px;
}

.child {
    display: inline-flex;
    width: 150px;
    height: auto;
}
// In the example above, the .child divs will take up more width (300 pixels) than the container div allows (200 pixels). 
// The .child divs will shrink to accommodate the container’s size



// 3. justify-content
// To position the items from left to right, we use justify-content

.container3 {
    display: flex;
    justify-content: flex-end;   // This will cause all of the flex items to shift to the right side of the flex container
    justify-content: flex-start; // all items will be positioned in order, starting from the left of the parent container
    justify-content: center; // all items will be positioned in order, in the center of the parent container
    justify-content: space-around;  // items will be positioned with equal space before and after each item, resulting in double space between elements
    justify-content: space-between; // items will be positioned with equal space between them, but no extra space before the first or after the last elements
}



// 4. align-items 
// It is possible to align flex items vertically within the container. The align-items property makes it possible to space flex items vertically.

.container4 {
    display: flex;
    align-items: flex-end;  // all elements will be positioned at the bottom of the parent container.
    align-items: flex-start;  //all elements will be positioned at the top of the parent container
    align-items: center;  //the center of all elements will be positioned halfway between the top and bottom of the parent container.
    align-items: baseline;  //the bottom of the content of all items will be aligned with each other.
    align-items: stretch; //if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).
}


// 5. flex-grow 