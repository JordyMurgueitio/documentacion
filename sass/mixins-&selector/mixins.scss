// MIXINS AND THE & SELECTOR



// 1. The & Selector in Nesting 
//  used to specify exactly where a parent selector should be inserted

.notecard{ 
    &:hover{
        @include transform (rotatey(-180deg));  
    }
}
/* .notecard:hover {
    transform: rotatey(-180deg);
} */



// 2. Mixins - make groups of CSS declarations that you want to reuse throughout your site.
/* NOTE Sass: Hyphens and underscores are considered to be the same. 
This means that @mixin important-text { } and @mixin important_text { } are considered as the same mixin! */

@mixin important-text {  // creates a mixin named "important-text":
    color: red;
    font-size: 25px;
    font-weight: bold;
    border: 1px solid blue;
}
// 2.1. @include - The @include directive is used to include a mixin.
.danger {
    @include important-text();
    background-color: green;
}



// 3. Mixins: Arguments - a value passed to the mixin that will be used inside the mixin,
// 3.1
@mixin paragh-color ($color) {
    color: $color;
}
p {
    @include paragh-color(red);
}
// 3.2
@mixin title-style ($color, $background-color, $font-size) {
    color: $color;
    background-color: $background-color; 
    font-size: $font-size;
}
.header-title {
    @include title-style(blue, black, 2em);
}
//3.3
@mixin bordered($color, $width) {
    border: $width solid $color;
}
.myArticle {
    @include bordered(blue, 1px);  // Call mixin with two values
}
.myNotes {
    @include bordered(red, 2px); // Call mixin with two values
}



// 4. Default value arguments - A default value is assigned to the argument if no value is passed in when the mixin is included
// 4.1 
@mixin header-style ($color: rgb(217, 216, 218), $background-color: rgb(66, 30, 36), $font-family: Tahoma) {
    color: $color;
    background-color: $background-color;
    font-family: $font-family;
}
// only need to specify the values that change when you include the mixin:
header {
    @include header-style($font-family: sans-serif); // the color and back color will be default
}
// 4.2
@mixin dashed-border($width, $color: #FFF) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}  
span { //only passes non-default argument
    @include dashed-border(3px);
}   
p { //passes both arguments
    @include dashed-border(3px, green);
}
div { //passes out of order but explicitly defined
    @include dashed-border($color: purple, $width: 5px); 
}



